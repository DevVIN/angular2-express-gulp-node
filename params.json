{
  "name": "Angular2-Express-Node-Gulp",
  "tagline": "Angular 2 - Quick start application with Express + Gulp + Type Script + Node",
  "body": "# Angular2 Gulp, Typescript, NodeJS and Express\r\n\r\n##Introduction\r\n\r\nBasic Angular seed application created with Quick start application given on angular website (https://angular.io/docs/ts/latest/quickstart.html). It uses Typescript, Gulp for tasks like build, compile, install etc and ExpressJS as server. The application basically involve both client(Angular2) and server(Express and Node).\r\n\r\n[Github Directory - https://github.com/moizKachwala/angular2-express](https://github.com/moizKachwala/angular2-express)\r\n\r\n##Getting Started\r\n\r\nBefore we start make sure you have NodeJS installed in your machine.If not then you can download and install NodeJS from (https://nodejs.org/en/)\r\n\r\nYou need to install typings globally by following command. \r\n\r\n`npm install --global typings`\r\n\r\n##Project Setup\r\n\r\nCreate a new directory and install dependencies. This will create a folder and will add the package.json in the folder.\r\n\r\n```\r\nmkdir Angular2-express\r\ncd Angular2-express\r\nnpm init -y\r\n```\r\n\r\nNow Add dependencies to your package.json.\r\n\r\n```\r\n\"dependencies\": {\r\n    \"angular2\": \"^2.0.0-beta.17\",\r\n    \"es6-promise\": \"^3.2.1\",\r\n    \"es6-shim\": \"^0.35.1\",\r\n    \"express\": \"^4.13.4\",\r\n    \"gulp-concat\": \"^2.6.0\",\r\n    \"reflect-metadata\": \"^0.1.2\",\r\n    \"rxjs\": \"^5.0.0-beta.6\",\r\n    \"systemjs\": \"^0.19.29\",\r\n    \"zone\": \"^0.3.4\"\r\n  }\r\n```\r\n\r\nAnd your dev dependencies.\r\n\r\n```\r\n \"devDependencies\": {\r\n    \"concurrently\": \"^2.1.0\",\r\n    \"del\": \"^2.2.0\",\r\n    \"gulp\": \"^3.9.1\",\r\n    \"gulp-concat\": \"^2.6.0\",\r\n    \"gulp-nodemon\": \"^2.1.0\",\r\n    \"gulp-sourcemaps\": \"^1.6.0\",\r\n    \"gulp-tslint\": \"^4.3.3\",\r\n    \"gulp-typescript\": \"^2.13.6\",\r\n    \"gulp-typings\": \"^2.0.0\",\r\n    \"run-sequence\": \"^1.2.1\",\r\n    \"tslint\": \"^3.5.0\"\r\n  }\r\n```\r\n\r\nNow install all the dependencies by opening the created folder in command prompt and fire following command.\r\n\r\n`npm install`\r\n\r\nOnce you have done `npm install`, you will find a node_modules folder in your directory. This holds all the dependencies that we added in package.json. Now create a file **gulpfile.ts** and  two folders in your project **client** and **server**.\r\n\r\nOur folder structure will look something like this.\r\n\r\n```\r\nangular2-express\r\n      |-- node_modules\r\n      |-- client\r\n      |-- server\r\n      gulpfile.ts\r\n      package.json\r\n\r\n```\r\n\r\nNow as we have taken gulpfile.ts we need to tell how to compile the ts file by adding tsconfig.json. This also set the outDir which we will be handling later. We have also added exclude option so we don't want typescript to go and compile those directives/files.\r\n\r\n```\r\n{\r\n  \"compilerOptions\": {\r\n    \"outDir\": \"build/app\",\r\n    \"target\": \"es5\",\r\n    \"module\": \"system\",\r\n    \"moduleResolution\": \"node\",\r\n    \"sourceMap\": true,\r\n    \"emitDecoratorMetadata\": true,\r\n    \"experimentalDecorators\": true,\r\n    \"removeComments\": false,\r\n    \"noImplicitAny\": false\r\n  },\r\n  \"exclude\": [\r\n    \"node_modules\",\r\n    \"typings\",\r\n    \"typings/index.d.ts\"\r\n  ]\r\n}\r\n\r\n```\r\n\r\nSo now we have done with the basic structure we will start implementing Server for our application.\r\n\r\n##Server Setup\r\n\r\nFirst thing we need to do is create a tsconfig.json inside server folder.This will tell our typescript compiler how to compile our .ts extension files.\r\n\r\nLet's create tsconfig.json in /server folder with following content.\r\n\r\n```\r\n{\r\n  \"compilerOptions\": {\r\n    \"target\": \"ES5\",\r\n    \"module\": \"commonjs\",\r\n    \"sourceMap\": true,\r\n    \"emitDecoratorMetadata\": true,\r\n    \"experimentalDecorators\": true,\r\n    \"removeComments\": false,\r\n    \"noImplicitAny\": false\r\n  },\r\n  \"exclude\": [\r\n    \"typings\"\r\n  ]\r\n}\r\n\r\n```\r\n\r\nIn our server directory, We need to add **typings.json**. Typings is the simple way to manage and install TypeScript definitions.\r\n\r\n```\r\n{\r\n  \"globalDependencies\": {\r\n    \"express\": \"registry:dt/express#4.0.0+20160317120654\",\r\n    \"express-serve-static-core\": \"registry:dt/express-serve-static-core#0.0.0+20160602151406\",\r\n    \"mime\": \"registry:dt/mime#0.0.0+20160316155526\",\r\n    \"node\": \"registry:dt/node#6.0.0+20160608083720\",\r\n    \"serve-static\": \"registry:dt/serve-static#0.0.0+20160606155157\"\r\n  }\r\n}\r\n\r\n```\r\n\r\nNow go to command prompt, and navigate to server folder and execute the following command. This will install the typescript definations for our server.\r\n\r\n`typings install`\r\n\r\nYou will notice that it created a directory **typings** inside **/server** directory\r\n\r\nNow lets create **server.ts** inside /server directory.\r\n\r\n```\r\nimport express = require('express');\r\nimport path = require('path');\r\nvar port: number = process.env.PORT || 3000;\r\nvar app = express();\r\n\r\napp.use('/app', express.static(path.resolve(__dirname, 'app')));\r\napp.use('/libs', express.static(path.resolve(__dirname, 'libs')));\r\n\r\nvar renderIndex = (req: express.Request, res: express.Response) => {\r\n    res.sendFile(path.resolve(__dirname, 'index.html'));\r\n}\r\n\r\napp.get('/*', renderIndex);\r\n\r\nvar server = app.listen(port, function() {\r\n    var host = server.address().address;\r\n    var port = server.address().port;\r\n    console.log('This express app is listening on port:' + port);\r\n});\r\n\r\n```\r\n\r\n* The server will run on port 3000\r\n* We have made **app** and **lib** folders as static content folder.\r\n* All the routes will be served by index.html\r\n* **app** folder will hold all the files related to angular2 and **libs** folder will hold all the dependencies. Don't worry we will create this folders in some time.\r\n\r\nWe are done with the server side work. Our directory structure will look like this.\r\n\r\n```\r\nangular2-express\r\n      |-- node_modules\r\n      |-- client\r\n      |-- server\r\n           |-- typings\r\n           |-- server.ts\r\n           |-- tsconfig.json\r\n           |-- typings.json\r\n      gulpfile.ts\r\n      package.json\r\n      tsconfig.json\r\n\r\n```\r\n\r\n\r\n##Client Setup\r\n\r\nLet's drive the Client Side Application with Angular2.\r\n\r\nIn /client directory add **index.html**\r\n\r\n```\r\n<html>\r\n\r\n  <head>\r\n    <title>Angular 2 Quickstart with Express</title>\r\n    <base href=\"/\"/>\r\n\r\n    <!-- 1. Load libraries -->\r\n    <script src=\"libs/angular2/bundles/angular2-polyfills.js\"></script>\r\n    <script src=\"libs/systemjs/dist/system.src.js\"></script>\r\n    <script src=\"libs/rxjs/bundles/Rx.js\"></script>\r\n    <script src=\"libs/angular2/bundles/angular2.dev.js\"></script>\r\n    <script src=\"libs/angular2/bundles/router.dev.js\"></script>\r\n\r\n    <!-- 2. Configure SystemJS -->\r\n    <script>\r\n      System.config({\r\n        packages: {        \r\n          app: {\r\n            format: 'register',\r\n            defaultExtension: 'js'\r\n          }\r\n        }\r\n      });\r\n      System.import('app/main')\r\n            .then(null, console.error.bind(console));\r\n    </script>\r\n\r\n  </head>\r\n  <!-- 3. Display the application -->\r\n  <body>\r\n    <my-app>Loading...</my-app>\r\n  </body>\r\n\r\n</html>\r\n\r\n```\r\n\r\n* This is the basic startup file for the angular application\r\n* Notice System.config in index.html. This will tell angular to load module based scripts in the browser.\r\n* There are libs included in the file which will load some of the core dependencies for our angular application.\r\n\r\nAs we are developing our application in Typescript, we need to add **tsconfig.json**\r\n\r\n```\r\n{\r\n  \"compilerOptions\": {\r\n    \"target\": \"ES5\",\r\n    \"module\": \"system\",\r\n    \"moduleResolution\": \"node\",\r\n    \"sourceMap\": true,\r\n    \"emitDecoratorMetadata\": true,\r\n    \"experimentalDecorators\": true,\r\n    \"removeComments\": false,\r\n    \"noImplicitAny\": false\r\n  },\r\n  \"exclude\": [\r\n    \"typings\"\r\n  ]\r\n}\r\n```\r\n\r\nWe will also need some typings to be installed for our application. Add **typings.json** like we added for server\r\n\r\n```\r\n{\r\n  \"globalDependencies\": {\r\n    \"es6-shim\": \"registry:dt/es6-shim#0.31.2+20160602141504\"\r\n  }\r\n}\r\n``` \r\n\r\nOnce you have added typings.json we need to install typings for our client application. Navigate to client folder in command prompt and run following command.\r\n\r\n`typings install`\r\n\r\n\r\n##Angular2 Code\r\n\r\nNow let's start adding our angular code.  create a directory named *app* inside */client* folder.\r\n\r\n###Note : I am just going to cover the basic angular code from quick start application. The main agenda for this post is to use angular with Express server. Please go to my [github](https://github.com/moizKachwala/angular2-express) to get the finished angular Quick start application.\r\n\r\nNow in */client/app*, Create our first component *app.component.ts*. This is our root component for our application\r\n\r\n```\r\nimport {Component} from 'angular2/core';\r\n@Component({\r\n  selector: 'my-app',\r\n  template: '<h1>My First Angular 2 App</h1>'\r\n})\r\nexport class AppComponent { }\r\n\r\n```\r\n\r\nNow we need to add a bootstrap class which will initialize our application. Add *main.ts* inside /app directory.\r\n\r\n```\r\nimport {bootstrap} from 'angular2/platform/browser';\r\n\r\nimport {AppComponent} from './app.component';\r\n\r\nbootstrap(AppComponent);\r\n```\r\n\r\nTill this point our project structure should look like this.\r\n\r\n```\r\nangular2-express\r\n      |-- node_modules\r\n      |-- client\r\n           |-- app\r\n                |-- app.component.ts\r\n                |-- main.ts\r\n           |-- typings\r\n           |-- index.html\r\n           |-- tsconfig.json\r\n           |-- typings.json\r\n      |-- server\r\n           |-- typings\r\n           |-- server.ts\r\n           |-- tsconfig.json\r\n           |-- typings.json\r\n      gulpfile.ts\r\n      package.json\r\n      tsconfig.json\r\n```\r\n\r\n##GulpFile (Task Management)\r\n\r\nNow we have our client and server setup we need to add a root file which would clean, compile and build our application. Modify **gulpfile.ts**\r\n\r\n```\r\n\"use strict\";\r\n\r\nconst gulp = require(\"gulp\"),\r\n        del = require(\"del\"),\r\n        tsc = require(\"gulp-typescript\"),\r\n        sourcemaps = require('gulp-sourcemaps'),\r\n        tsProject = tsc.createProject(\"tsconfig.json\"),\r\n        tslint = require('gulp-tslint'),\r\n        concat = require('gulp-concat'),\r\n        runSequence = require('run-sequence'),\r\n        nodemon = require('gulp-nodemon'),\r\n        gulpTypings = require(\"gulp-typings\");\r\n\r\n/**\r\n * Remove build directory.\r\n */\r\ngulp.task('clean', (cb) => {\r\n    return del([\"build\"], cb);\r\n});\r\n\r\n/**\r\n * Build Express server\r\n */\r\ngulp.task('build:server', function () {\r\n    var tsProject = tsc.createProject('server/tsconfig.json');\r\n    var tsResult = gulp.src('server/**/*.ts')\r\n        .pipe(sourcemaps.init())\r\n        .pipe(tsc(tsProject))\r\n    return tsResult.js\r\n        .pipe(concat('server.js'))\r\n        .pipe(sourcemaps.write())\r\n        .pipe(gulp.dest('build'))\r\n});\r\n\r\ngulp.task('build:client', function(){\r\n    var tsProject = tsc.createProject('client/tsconfig.json');\r\n    var tsResult = gulp.src('client/**/*.ts')\r\n        .pipe(sourcemaps.init())\r\n        .pipe(tsc(tsProject))\r\n    return tsResult.js\r\n        .pipe(sourcemaps.write())\r\n        .pipe(gulp.dest('build'))\r\n});\r\n\r\n/**\r\n * Lint all custom TypeScript files.\r\n */\r\ngulp.task('tslint', () => {\r\n    return gulp.src(\"client/app/**/*.ts\")\r\n        .pipe(tslint())\r\n        .pipe(tslint.report('prose'));\r\n});\r\n\r\n\r\n/**\r\n * Compile TypeScript sources and create sourcemaps in build directory.\r\n */\r\ngulp.task(\"compile\", [\"tslint\"], () => {\r\n    let tsResult = gulp.src(\"client/**/*.ts\")\r\n        .pipe(sourcemaps.init())\r\n        .pipe(tsc(tsProject));\r\n    return tsResult.js\r\n        .pipe(sourcemaps.write(\".\"))\r\n        .pipe(gulp.dest(\"build\"));\r\n});\r\n\r\n/**\r\n * Copy all resources that are not TypeScript files into build directory.\r\n */\r\ngulp.task(\"resources\", () => {\r\n    return gulp.src([\"client/**/*\", \"!**/*.ts\"])\r\n        .pipe(gulp.dest(\"build\"));\r\n});\r\n\r\n/**\r\n * Copy all required libraries into build directory.\r\n */\r\ngulp.task(\"libs\", () => {\r\n    return gulp.src([\r\n        'angular2/bundles/angular2-polyfills.js',\r\n        'systemjs/dist/system.src.js',\r\n        'rxjs/bundles/Rx.js',\r\n        'angular2/bundles/angular2.dev.js',\r\n        'angular2/bundles/router.dev.js'\r\n    ], {cwd: \"node_modules/**\"}) /* Glob required here. */\r\n        .pipe(gulp.dest(\"build/libs\"));\r\n});\r\n\r\n/**\r\n * Watch for changes in TypeScript, HTML and CSS files.\r\n */\r\ngulp.task('watch', function () {\r\n    gulp.watch([\"client/**/*.ts\"], ['compile']).on('change', function (e) {\r\n        console.log('TypeScript file ' + e.path + ' has been changed. Compiling.');\r\n    });\r\n    gulp.watch([\"client/**/*.html\", \"client/**/*.css\"], ['resources']).on('change', function (e) {\r\n        console.log('Resource file ' + e.path + ' has been changed. Updating.');\r\n    });\r\n});\r\n\r\n/**\r\n * Install typings for server and client.\r\n */\r\ngulp.task(\"installTypings\",function(){\r\n    var stream = gulp.src([\"./server/typings.json\",\"./client/typings.json\"])\r\n        .pipe(gulpTypings(null)); //will install all typingsfiles in pipeline.\r\n    return stream; // by returning stream gulp can listen to events from the stream and knows when it is finished.\r\n});\r\n\r\n/**\r\n * Start the express server with nodemon\r\n */\r\ngulp.task('start', function () {\r\n    nodemon({ script: 'build/server.js'\r\n        , ext: 'html js'\r\n        , ignore: ['ignored.js']\r\n        , tasks: ['tslint'] })\r\n        .on('restart', function () {\r\n            console.log('restarted!')\r\n        });\r\n});\r\n\r\n/**\r\n * Build the project.\r\n * 1. Clean the build directory\r\n * 2. Build Express server\r\n * 3. Build the Angular app\r\n * 4. Copy the resources\r\n * 5. Copy the dependencies.\r\n */\r\n\r\ngulp.task(\"build\", function (callback) {\r\n    runSequence('clean', 'build:server', 'build:client', 'resources', 'libs', callback);\r\n});\r\n\r\n```\r\n\r\n* Gulpfile handles many tasks.\r\n* Clean - clean the build directory\r\n* Compile - compile the .ts files and generate .js and .map files.\r\n* Build:server - Build our server.ts\r\n* Build:client - Build our angular application.\r\n* Watch - Watch for the changes.\r\n* Start - It uses nodemon for running the server. The benefit of running this is it will automatically restart the server when there is any change in the code.\r\n* tslint - this will run the code against some best practices.\r\n\r\n\r\n##Running the code\r\n\r\n```\r\nnpm install\r\nnpm build\r\nnpm start\r\n```\r\n\r\n##Ts Lint\r\n\r\nCreate a file **tslint.json** in the root directory.\r\n\r\n```\r\n{\r\n  \"rules\": {\r\n    \"class-name\": true,\r\n    \"curly\": true,\r\n    \"eofline\": false,\r\n    \"forin\": true,\r\n    \"indent\": [\r\n      true,\r\n      4\r\n    ],\r\n    \"label-position\": true,\r\n    \"label-undefined\": true,\r\n    \"max-line-length\": [\r\n      true,\r\n      200\r\n    ],\r\n    \"no-arg\": true,\r\n    \"no-bitwise\": true,\r\n    \"no-console\": [\r\n      true,\r\n      \"debug\",\r\n      \"info\",\r\n      \"time\",\r\n      \"timeEnd\",\r\n      \"trace\"\r\n    ],\r\n    \"no-construct\": true,\r\n    \"no-debugger\": true,\r\n    \"no-duplicate-key\": true,\r\n    \"no-duplicate-variable\": true,\r\n    \"no-empty\": false,\r\n    \"no-eval\": true,\r\n    \"no-string-literal\": false,\r\n    \"no-trailing-whitespace\": true,\r\n    \"no-unused-variable\": false,\r\n    \"no-unreachable\": true,\r\n    \"no-use-before-declare\": true,\r\n    \"one-line\": [\r\n      true,\r\n      \"check-open-brace\",\r\n      \"check-catch\",\r\n      \"check-else\",\r\n      \"check-whitespace\"\r\n    ],\r\n    \"radix\": true,\r\n    \"semicolon\": true,\r\n    \"triple-equals\": [\r\n      true,\r\n      \"allow-null-check\"\r\n    ],\r\n    \"variable-name\": false,\r\n    \"whitespace\": [\r\n      true,\r\n      \"check-branch\",\r\n      \"check-decl\",\r\n      \"check-operator\",\r\n      \"check-separator\"\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nThe final project structure will look like this.\r\n\r\n```\r\nangular2-express\r\n      |-- node_modules\r\n      |-- client\r\n           |-- app\r\n                |-- app.component.ts\r\n                |-- main.ts\r\n           |-- typings\r\n           |-- index.html\r\n           |-- tsconfig.json\r\n           |-- typings.json\r\n      |-- server\r\n           |-- typings\r\n           |-- server.ts\r\n           |-- tsconfig.json\r\n           |-- typings.json\r\n      gulpfile.ts\r\n      package.json\r\n      tsconfig.json\r\n      tslint.json\r\n```\r\n\r\n## Finally\r\n\r\nStay tuned for adding mongoDB support in this application.\r\n\r\n\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}